name: Python
on:
  push:
    branches: ["master", "main", "develop"]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.github/**.md'
  pull_request:
    branches: ["master", "main"]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.github/**.md'

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Restrict permissions for security
permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-main-dev-docs
          restore-keys: |
            venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-
            venv-${{ runner.os }}-
      
      - name: Install dependencies
        # Only install if cache miss - saves significant time
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --only main,dev,docs
      
      - name: Lint with ruff
        run: |
          poetry run ruff check . --output-format=github || exit 1
          poetry run ruff format --check . || exit 1
      
      - name: Type check with mypy
        run: poetry run mypy . || exit 1
      
      - name: Run tests
        run: |
          poetry run pytest -n auto \
            --cov=energy_transformer \
            --cov-report=xml \
            --cov-report=term-missing:skip-covered \
            --junitxml=junit/test-results.xml
      
      - name: Build documentation
        run: poetry run sphinx-build -b html docs docs/_build/html
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit/test-results.xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: b-vitamins/energy-transformer
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
